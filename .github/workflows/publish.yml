name: "publish"

on: pull_request

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: set Environment Variables
        id: set_env_var
        run: |
          if [ $REPOSITORY = "main" ]; then IS_PRE='false'; else IS_PRE='true'; fi
          if [ $REPOSITORY = "main" ]; then POSTFIX=''    ; else POSTFIX='PRE';    fi
          RELEASEBODY=$(awk -v RS='Release [0-9.]+:' '/[0-9.]+/ {print $0}' ChangeLog.h | sed 's/  */ /g')
          echo "version: ${PACKAGE_VERSION}"
          echo "IS_PRERELEASE: ${IS_PRE}"
          echo "RELEASENAME_POSTFIX: ${POSTFIX}"
          echo "RELEASEBODY: ${RELEASEBODY}"
          echo "RELEASEBODY_BASE64=$(echo -n "$RELEASEBODY" | base64)" >> $GITHUB_ENV
        env:
          REPOSITORY: ${{ github.event.repository.name }}

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `FPS v${process.env.PACKAGE_VERSION}`,
              body: Buffer.from(process.env.RELEASEBODY_BASE64, 'base64').toString('utf-8'),
              draft: true,
              prerelease: false
            })
            return data.id

  # build-tauri:
  #   needs: create-release
  #   permissions:
  #     contents: write
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform: [macos-latest]

  #   runs-on: ${{ matrix.platform }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20

  #     - name: install Rust stable
  #       uses: dtolnay/rust-toolchain@stable

  #     - name: install dependencies (ubuntu only)
  #       if: matrix.platform == 'ubuntu-20.04'
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

  #     - uses: oven-sh/setup-bun@v1
  #       with:
  #         bun-version: latest

  #     - name: install frontend dependencies
  #       run: bun install

  #     - uses: tauri-apps/tauri-action@v0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         releaseId: ${{ needs.create-release.outputs.release_id }}

  # publish-release:
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-20.04
  #   needs: [create-release, build-tauri]

  #   steps:
  #     - name: publish release
  #       id: publish-release
  #       uses: actions/github-script@v6
  #       env:
  #         release_id: ${{ needs.create-release.outputs.release_id }}
  #       with:
  #         script: |
  #           github.rest.repos.updateRelease({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             release_id: process.env.release_id,
  #             draft: false,
  #             prerelease: false
  #           })
